// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// plugins/codeamp/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x72\xdb\x36\x10\xbe\xeb\x29\xa0\xc9\x45\x9e\xf1\x13\xf0\x98\x38\x6d\xd3\x36\xad\x6b\x35\xa7\x4c\x0e\x30\x05\x4b\x68\x48\x42\x01\x40\xb7\x9e\x4e\xdf\xbd\x03\x60\x01\xee\xe2\x47\xb2\x9c\x74\xa6\x17\x89\x58\x82\x1f\xf6\x5b\xec\x1f\x60\x7a\x3e\x70\xcd\x7e\x97\xa3\x58\xc1\xf3\x8f\xdb\x5f\x7f\x59\xad\x4c\x7f\x10\x23\x67\x7f\xaf\x18\xfb\x32\x0b\xfd\xd4\xb1\xdf\xdc\xdf\x8a\xb1\x71\xb6\xdc\x4a\x35\x75\xec\x3d\x3c\xad\xfe\x59\xad\x5e\xc1\x7b\xfb\x74\x14\xe1\xd1\x7f\xfb\x8a\x7d\x30\x42\xaf\x18\x9b\x8d\xd0\x1b\xb9\xeb\xd8\xbb\x9b\xab\x2e\x0a\xc3\x5b\x03\xaf\xcd\xe6\xaa\x63\x1f\x9d\xe4\xd3\xda\xbf\xbc\xd5\xea\x0f\xd1\xdb\x15\x63\xc7\xf0\x04\x00\xd7\xcc\x0c\xf3\xbe\x63\x5b\xab\xe5\xb4\xbf\x66\x13\x1f\xc5\x32\x12\xd3\xa3\xd4\x6a\x1a\xc5\x64\xdf\xdd\x44\xf1\x55\x87\xd0\x12\xb2\x59\xa0\xcd\x06\x1e\xb6\x82\xeb\xfe\x90\xa6\x87\xe1\xbb\xe9\x38\x5b\xa7\x1d\x48\x41\xc1\xef\x04\xb7\xb3\x16\x0e\xe6\x01\x1e\x3d\x07\x90\xc3\xac\xad\xd0\x8f\xb2\xf7\xb3\x0c\x3c\xfa\x59\x20\xa7\xb3\x98\x39\x8a\x1e\x4d\xdd\xba\x21\x9e\xee\x04\xf0\xc9\x9d\x18\x04\x37\x1e\x58\xc3\xa3\x9f\x09\x72\x98\xf5\x76\xb1\x87\x9b\x89\xcc\x13\x66\xa3\xf7\xe5\x17\xec\x91\x6b\xc9\xef\x07\xd0\xbe\xd7\xc2\x46\x6d\xdc\x33\xdd\xa8\xb7\x7f\x59\x31\x19\xa9\x26\x4f\xc2\xad\x15\x05\x66\xd3\xda\x95\x8f\xe9\xa3\x06\x16\xda\xa3\x45\xb6\x41\x7b\x91\x03\x00\x7b\xb4\xf8\x62\x9f\x0c\xe1\x2e\x93\x46\x15\x84\x1e\xa5\x49\x8b\x2f\x23\xf7\x91\x0b\x8f\x75\xf0\xf8\xe4\xff\xde\xe9\xe3\x08\xfc\xfe\x8d\x16\xdc\x8a\xa8\xfa\x8a\xb1\xde\x0b\x40\xe9\xe8\x6d\xc9\xcf\xa2\x87\x61\x2f\xfd\x70\xdc\x51\x88\xd9\x0b\x2e\x81\x00\x2d\x80\x7e\xd2\x02\x88\x6f\x40\xde\x45\xa3\x45\x88\xbb\x34\x3f\x41\x80\x3f\x26\x08\x70\xc7\x0d\xc8\xbb\xe8\xc0\x11\x62\x9b\xe6\x27\x22\x8b\x28\x10\xb9\x04\xe2\x46\x0c\x82\x68\xb1\xf3\x82\x4b\x20\x28\x91\xe8\xa3\x84\x8d\x0b\xae\x0d\x8a\xbc\x04\xe0\x06\x19\xe6\x36\x7c\x9f\xd8\x65\xb8\x84\xe2\x8b\x70\x29\xe5\x88\x4b\x78\xbf\x08\x17\xec\x80\x22\x32\x99\x01\x45\x3e\x8e\xd8\x0e\xa7\x84\x08\xfb\x96\x7c\x9f\xcc\x40\x61\x83\x15\xbe\x06\x16\xac\x40\x61\x83\x11\xbe\x06\xb6\x34\x42\x4a\x75\xc8\x29\x5c\x8e\xdb\x84\xb4\xe7\xec\xe8\xfe\x17\xab\xba\x51\x83\x39\xc6\x8a\x8e\xf0\x3c\xac\x92\x6e\xc2\x62\x68\xf7\x9f\x07\x16\x49\xe6\x79\x19\x36\x3b\x8a\x37\x69\x42\xc7\x92\x30\x19\x2e\x0a\x08\xd5\x1c\x11\xf6\xf9\x05\x88\x91\x70\x8e\x08\x5b\xfc\x02\xc4\x9c\x75\x9e\x7b\x17\xcc\xbc\xae\x74\x45\xf5\xc9\x72\xea\x69\x63\xe4\x19\xfa\x9b\x2d\x84\x6c\x04\xb2\x60\x9d\xff\x88\x90\x6b\xc6\x70\xd9\x4b\xbc\x5c\x6f\x86\x8a\xe3\x66\xa6\xe3\xd0\xd7\x21\x41\x6a\x9b\x42\xb9\x5f\x43\x7d\xa5\x75\x8d\x74\x24\x85\x09\x71\xb7\x72\x2c\x65\x0b\x11\x24\x4c\xcb\x22\x61\x5c\xfb\xb5\x52\x9f\x47\xae\x3f\xa3\xaa\x7a\x0f\xa2\x5b\xd2\x64\xae\xaf\x3a\x37\x79\x10\x7c\x82\x72\xef\x9b\x56\x5f\xea\xdd\x93\x2f\xf3\x30\xd5\xb5\x3a\x23\x97\x43\xec\x6b\xd6\xb4\x6d\xc8\x0c\x10\x9c\x71\xd7\xf9\xae\x1b\xb0\xa1\x63\x0c\xf0\x30\xc8\x56\xc8\xcb\xbd\x93\x8d\xc2\x18\xbe\x17\x78\x5d\xb7\x27\x78\x7c\xe0\xe6\x40\xf4\xe2\x5a\x4c\xf6\x87\x4c\xaa\xc5\x03\x1e\xd6\x54\x8c\xa5\xd4\xab\x18\xbb\xd5\xf3\x2a\xf6\x6a\x1c\xf9\xb4\xc3\xe8\xb8\x5f\x5f\xd3\x56\x97\x54\xab\xf0\xf9\xec\x32\x3a\xd2\x5f\x69\xb7\xed\x1f\x5d\x1f\xe6\xcd\xd9\xca\xfc\xee\x9d\xd3\xf5\x1c\x2f\x5c\x19\x3c\x37\xdc\xfe\x52\x7e\xb9\xe2\x9f\xc5\x13\x1e\x4a\x73\x23\x1e\xf8\x3c\x58\xe4\x39\x8e\xc1\xa0\xf4\x09\x25\x92\xd9\x62\x3b\xbf\x34\xa6\xce\x5f\x72\x1d\x97\xd2\x02\x1b\xe1\xb2\x7d\xa6\x67\xa6\xd7\x23\x1f\x66\x6a\xf0\x5e\x51\xbb\xd4\x36\x2e\x38\x92\x73\xf5\x9a\x25\x1f\x85\x4e\xbe\xbd\x1c\x05\x4e\xed\x45\x41\x5b\x9a\x2d\x14\x30\x1a\x67\xf8\x24\x44\xbc\xcd\xf9\xc4\x99\x1d\xe9\x8f\xf3\x9d\xf8\x32\x0b\x63\x33\xe9\xcf\x72\x94\x44\x36\x8a\x51\xe9\xa7\xca\xe4\xf0\xa2\x98\x6f\x5d\x3c\x4f\xbe\xc3\xff\x5e\xf3\x5e\xdc\x0a\x2d\xd5\xee\x9c\x73\xc5\x46\xda\xd3\x88\x27\x93\xf3\x41\x43\x6d\xcf\xb5\x95\x0f\xbc\x77\x6e\x1f\x4e\x1f\x8c\x1d\x04\xdf\x41\x9a\xe8\x62\xbe\xf0\x5a\x72\x39\xd4\xe4\xc6\x72\x2b\x68\xc0\x67\x07\xa2\xd6\x71\xc8\x7f\xf9\xbe\xcc\x33\x17\x6c\xb5\xb7\x44\x3c\x95\x78\x4b\xc0\xe0\xcc\x66\xe2\x53\x7e\xd0\xf9\xa8\x8c\xb4\x4a\x3f\xd1\xec\x01\x5d\x50\x92\xec\xa5\xfd\xa0\x87\x4c\x72\xab\x95\x55\xbd\x22\x62\x6d\xf8\xad\x96\x8f\xdc\x8a\x9f\x68\xc4\xb8\x17\xf3\xfd\x20\xfb\x4c\x9e\x4e\xf9\xe6\xa0\xfe\xbc\x11\xc7\x41\x3d\x39\x9a\xe0\xbf\xf9\xd1\xbf\x9f\xb5\xcb\xb5\x77\xd9\x21\x0b\x1d\xd7\xb3\xc3\x7a\xbc\x1e\xc8\x2e\x07\xe0\xdc\x9d\x85\x1a\xde\xb9\xea\x51\x78\x2f\xed\x6b\xcd\xa7\x9e\x24\xfa\x5e\x4d\x56\x4e\xb3\x9a\x4d\x50\x9f\xa4\x2a\x41\x2a\x6b\x59\x3e\x63\xa5\x44\x9c\x9b\x59\x95\xf6\x73\x21\xb1\x26\xd9\x99\x20\x56\xe3\x51\x4d\x82\xe6\xfd\x3c\x01\x65\x39\xee\xa4\x3b\xaa\xe9\x41\xee\x97\xe0\x39\xe1\x9e\x4b\x3f\x84\xfd\xb4\xa5\x78\x2d\x74\x6b\x7d\x6a\x23\x88\x0b\xbd\x66\x63\xd5\xf8\x26\x93\x16\xa1\xfb\xad\x22\xb2\xb8\x28\x21\x59\xaa\xc5\x39\xbf\x32\xc8\x38\xe7\x16\xc3\x6e\xbd\x95\xfb\x09\x52\x53\x1e\xbe\x8d\x77\x39\xf5\xdc\x09\x5a\xa6\xa8\x18\xfb\x41\x4e\xd2\x1c\x70\xfd\x39\xe1\x06\x4c\xba\x16\x72\xe5\x7f\xc9\xf5\x4a\x32\x46\x58\xab\x9d\x5a\xaa\x39\x88\x86\x63\x3d\xa0\xe8\x46\x2e\x77\x65\xa7\x62\x97\xe8\x1e\x6e\x2c\x6b\x0c\xd0\x5d\xa6\xe7\x51\xe6\xd3\xeb\x56\x90\x13\x87\xc1\xd0\xf8\xe2\xa8\x34\x0e\x2a\x53\x0b\x13\x14\x39\x54\x58\xe5\xed\xf7\x4e\xe9\x5e\xdc\x89\xfb\x59\x0e\x85\x52\xb1\x5b\xc0\x4a\xe1\x4b\xa0\x52\xa9\xea\xda\x97\xb5\xa9\xf9\xb7\x8d\x1e\x15\xf4\xb8\x55\x3a\x78\xcf\xfa\x53\xc5\x87\x1b\xac\x3d\xb9\x37\x6a\xb2\x5c\x4e\xee\x38\xa6\xb4\xad\x71\x4c\xd8\x9e\xa7\x9b\x95\x99\x39\xf3\xcc\xa2\xc3\xaa\x81\xa6\xdb\xa3\xd2\x78\xff\x9f\x86\xab\x68\x8c\x31\x91\xfc\x06\xe8\x3c\x91\x97\xf4\xf2\xcd\xde\x3c\x33\x6a\xba\x9e\x29\xd5\x38\xd7\xaa\x17\x19\xaf\xd1\xba\x93\x44\xd1\x0c\xa4\x56\xcb\x5d\xbd\xc0\xa7\x06\x25\x17\x08\x17\x9b\xb3\x5a\xd2\x9b\x6a\xe6\x85\x91\x1a\xa1\xae\x71\x25\xdf\x9d\xd4\xf9\xba\x9a\x09\xae\x71\x35\xcb\xe4\xcf\x2b\xd7\xa7\xc2\x99\x5e\x8f\x10\x95\x6b\x37\x27\x5e\x63\x77\x14\xc8\x72\x27\xb9\x59\xa0\x1f\x42\x9a\xb9\x74\xbd\x65\xb9\xc2\x01\xf7\x9a\x4f\x4d\x7f\x69\x44\x5f\xf9\x7a\x59\xa0\xb9\xe9\xcf\x5c\x28\x98\xa6\xb9\xd0\x62\xb9\x5a\x9a\xa7\xa6\x6b\xa8\x19\xcc\xf7\x6f\x00\x00\x00\xff\xff\x1e\x17\xeb\xa4\x1a\x1d\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 7450, mode: os.FileMode(420), modTime: time.Unix(1525290297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampStaticIndexHtml,
		"plugins/codeamp/static/index.html",
	)
}

func pluginsCodeampStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1510690037, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
	"plugins/codeamp/static/index.html": pluginsCodeampStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{pluginsCodeampStaticIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

